// 2. Добавить бота, уровень его мозгов выбирайте по желанию

// При создании бота пошел "проторенным путем" - класс Enemy и EnemyController

// Enemy

public class Enemy extends Ship implements Poolable {
    private GameController gc;
    private TextureRegion texture;
    private Vector2 position;
    private Vector2 velocity;
    private int hpMax;
    private int hp;
    private float scale;
    private float angle;
    private float rotationSpeed;
    private boolean active;
    private Circle hitArea;
    private float damageCoeff;
    private Weapon currentWeapon;
    private int maxBullets;
    private float fireTimer;
    private Vector2 tmpVec;

    private final float BASE_SIZE = 64;
    private final float BASE_RADIUS = BASE_SIZE / 2.0f;

    public int getHpMax() {
        return hpMax;
    }
    public Vector2 getPosition() {
        return position;
    }
    public Circle getHitArea() {
        return hitArea;
    }
    public Vector2 getVelocity() {
        return velocity;
    }
    public float getScale() {
        return scale;
    }
    public float getAngle() { return angle; }

    @Override
    public boolean isActive() {
        return active;
    }

    public void deactivate() {
        active = false;
    }
    public void renderGUI() {};

    public Enemy(GameController gc) {
        this.gc = gc;
        this.position = new Vector2(0, 0);
        this.velocity = new Vector2(0, 0);
        this.hitArea = new Circle(0, 0, 0);
        this.active = false;
        this.texture = Assets.getInstance().getAtlas().findRegion("enemy");
        this.maxBullets = 100000;
        this.angle = 0.0f;
        this.tmpVec = new Vector2(0.0f, 0.0f);
        this.currentWeapon = new Weapon( gc, this, "EnemyLaser", 0.2f, 1, 900.0f, maxBullets,
                new Vector3[]{
                        new Vector3(28, 90, 0),
                        new Vector3(28, -90, 0)
                }, "enemy");
    }

    public boolean takeDamage(int amount) {
        hp -= amount;
        if (hp <= 0) {
            deactivate();
            return true;
        }
        return false;
    }

    public void activate(float x, float y, float vx, float vy, float scale, int enemyHpCoeff, float enemyDamageCoeff) {
        this.position.set(x, y);
        this.velocity.set(vx, vy);
        this.hpMax = enemyHpCoeff;
        this.hp = this.hpMax;
        this.angle = MathUtils.random(0.0f, 360.0f);
        this.hitArea.setPosition(position);
        this.rotationSpeed = MathUtils.random(-60.0f, 60.0f);
        this.active = true;
        this.scale = scale;
        this.hitArea.setRadius(BASE_RADIUS * scale * 0.9f);
        this.damageCoeff = enemyDamageCoeff;
    }

    public void render(SpriteBatch batch) {
        batch.draw(texture, position.x - 128, position.y - 128, 128, 128, 256, 256, scale, scale, angle);
    }

    public void update(float dt) {
        fireTimer += dt;
        position.mulAdd(velocity, dt);

        if (position.x < -BASE_RADIUS * scale) {
            position.x = ScreenManager.SCREEN_WIDTH + BASE_RADIUS * scale;
        }
        if (position.x > ScreenManager.SCREEN_WIDTH + BASE_RADIUS * scale) {
            position.x = -BASE_RADIUS * scale;
        }
        if (position.y < -BASE_RADIUS * scale) {
            position.y = ScreenManager.SCREEN_HEIGHT + BASE_RADIUS * scale;
        }
        if (position.y > ScreenManager.SCREEN_HEIGHT + BASE_RADIUS * scale) {
            position.y = -BASE_RADIUS * scale;
        }
        hitArea.setPosition(position);

        if (fireTimer > currentWeapon.getFirePeriod()) {
            fireTimer = 0.0f;
            currentWeapon.fire();
        }
    }
}


// EnemyController 

public class EnemyController extends ObjectPool<Enemy> {
    private GameController gc;

    @Override
    protected Enemy newObject() {
        return new Enemy(gc);
    }

    public EnemyController(GameController gc) {
        this.gc = gc;    }

    public void render(SpriteBatch batch) {
        for (int i = 0; i < activeList.size(); i++) {
            Enemy e = activeList.get(i);
            e.render(batch);
        }
    }

    public void setup(float x, float y, float vx, float vy, float scale, int enemyHpCoeff, float enemyDamageCoeff) {
        getActiveElement().activate(x, y, vx, vy, scale, enemyHpCoeff, enemyDamageCoeff);
    }

    public void update(float dt) {
        for (int i = 0; i < activeList.size(); i++) {
            activeList.get(i).update(dt);
        }
        checkPool();
    }
}

// Я создал абстрактный класс Ship для создания оружия, куда нужно передавать героя, 
// теперь я передаю не героя а тиg корабля

// Ship с заглушками для требуемых методов

public abstract class Ship {
    public abstract Vector2 getPosition();
    public abstract Vector2 getVelocity();
    public abstract float getAngle();

}

// Weapon под "обобщенны2" тип корабля

public Weapon(GameController gc, Ship ship, String title, float firePeriod, int damage, float bulletSpeed, int maxBullets, Vector3[] slots, String bulletID) {
        this.gc = gc;
        this.hero = hero;
        this.title = title;
        this.firePeriod = firePeriod;
        this.damage = damage;
        this.bulletSpeed = bulletSpeed;
        this.maxBullets = maxBullets;
        this.currBullets = this.maxBullets;
        this.slots = slots;
        this.shootSound = Assets.getInstance().getAssetManager().get("audio/Shoot.mp3");
        this.ship = ship;
        this.bulletID = bulletID;
    }

    public void setCurrBullets(float getAmmoPackProbo) {
        this.currBullets += (int)(getAmmoPackProbo);
        if (this.currBullets > 1000) this.currBullets = 1000;
    }

    public void fire() {
        if(currBullets > 0) {
            currBullets--;
            shootSound.play();
            for (int i = 0; i < slots.length ; i++) {
                float x, y, vx, vy;
                x = ship.getPosition().x + slots[i].x * (float)Math.cos(Math.toRadians(ship.getAngle() + slots[i].y));
                y = ship.getPosition().y + slots[i].x * (float)Math.sin(Math.toRadians(ship.getAngle() + slots[i].y)) ;
                vx = ship.getVelocity().x + bulletSpeed * (float)Math.cos(Math.toRadians(ship.getAngle() + slots[i].z));
                vy = ship.getVelocity().y + bulletSpeed * (float)Math.sin(Math.toRadians(ship.getAngle() + slots[i].z));
                gc.getBulletController().setup(x, y, vx, vy, ship.getAngle(), bulletID );

// Создание бота у меня зашито в управление уровнями. Создается один бот, в середине (по времени) уровня
// Урон наносимый ботом герою и его сопративляемость растет с каждым уровнем

public class LevelController {

    private GameController gc;
    private Boolean levelIsComplete;
    private int levelCount;
    private Boolean startNewLevel;
    private AsteroidController asteroidController;
    private EnemyController enemyController;
    private int asteroidMax;
    private int hpCoeff;
    private int enemyHpCoeff;
    private float damageCoeff;
    private float enemyDamageCoeff;
    private long startLevel;
    private float levelTime;
    private float levelTimeInit;
    private boolean levelFail;
    private boolean levelComplete;
    private String failMessage;
    private int enemyCount;

    public LevelController(GameController gc) {
        this.gc = gc;
        this.levelIsComplete = false;
        this.startNewLevel = true;
        this.asteroidController = gc.getAsteroidController();
        this.enemyController = gc.getEnemyController();
        this.asteroidMax = 3;
        this.hpCoeff = 10;
        this.enemyHpCoeff = 5;
        this.levelTimeInit = 106.0f;
        this.levelFail = false;
        this.levelComplete = false;
        this.levelCount = 0;
        this.damageCoeff = 1.0f;
        this.enemyDamageCoeff = 2.0f;
//        this.enemyCount = 0;
    }

    public int getLevelCount() { return levelCount; }
    public float getLevelTime() { return Math.round(levelTime * 10) / 10; }
    public float getDamageCoeff() {return damageCoeff;}
    public float getEnemyDamageCoeff() {return enemyDamageCoeff;}

    public void update(float dt) {
            if (gc.getHero().getHp() > 0 & startNewLevel) {
                startLevel = System.currentTimeMillis();
                // Здоровье героя на 100 с каждым уровнем
                gc.getHero().setHp(100.0f);
                for (int i = 0; i < asteroidMax; i++) {
                    asteroidController.setup(MathUtils.random(0, GameController.SPACE_WIDTH), MathUtils.random(0, GameController.SPACE_HEIGHT),
                            MathUtils.random(-150.0f, 150.0f), MathUtils.random(-150.0f, 150.0f), 1.0f, hpCoeff, damageCoeff);
                }
                startNewLevel = false;
                hpCoeff += 5;
                asteroidMax += 1;
                levelTimeInit -= 5.0f;
                levelTime = levelTimeInit;
                levelCount += 1;
                damageCoeff += 0.1f;
                enemyDamageCoeff += 0.1f;
                enemyCount = 1;
            }
            levelTime = levelTime - dt;

            if (((System.currentTimeMillis() - startLevel) / 1000.0f) > levelTimeInit) {
                ScreenManager.getInstance().changeScreen(ScreenManager.ScreenType.GAMEOVER);
                this.failMessage = "TIME IS UP";
                ScreenManager.getInstance().getGameOver().setFinalScore(gc.getHero().getScore(), failMessage);
            }

            if (gc.getHero().getHp() <= 0) {
                ScreenManager.getInstance().changeScreen(ScreenManager.ScreenType.GAMEOVER);
                failMessage = "SHIP IS LOST";
                ScreenManager.getInstance().getGameOver().setFinalScore(gc.getHero().getScore(), failMessage);
            }
            if (gc.getHero().getHp() > 0 & asteroidController.getActiveList().size() == 0) {
                levelComplete = true;
                startNewLevel = true;
            }
            if ((int)levelTime == (int) (levelTimeInit - 1) / 2 & enemyCount == 1) {
                enemyController.setup(MathUtils.random(ScreenManager.SCREEN_WIDTH + 50, GameController.SPACE_WIDTH + 60), MathUtils.random(50, GameController.SPACE_HEIGHT - 50),
                        MathUtils.random(-150.0f, 150.0f), MathUtils.random(-150.0f, 150.0f), 0.3f, enemyHpCoeff, enemyDamageCoeff);
                enemyCount = 0;
            }
        }
}

// Попытался реализовать движение бота в сторону корабля, вышло средне - бот летит более или менее в сторону корабля
// но не смотрит на корабль. Также здесь в gc - обработки перестрелки, для избежания урона от своих пуль
// в bullet добавлен идентификатор - bulletID, который пробрасывается через создание оружия в bullet


// Gamecontroller

        // Движение бота
        for (int i = 0; i < enemyController.getActiveList().size(); i++) {
            Enemy enemy = enemyController.getActiveList().get(i);
            tmpVec2.x = (float) Math.cos(Math.toRadians(getHero().getAngle() - 180 ));
            tmpVec2.y = (float) Math.sin(Math.toRadians(getHero().getAngle() - 180 ));
            enemy.getPosition().mulAdd(tmpVec2, 2);
        }
        // Бот стреляет в героя
        for (int i = 0; i < bulletController.getActiveList().size(); i++) {
            Bullet b = bulletController.getActiveList().get(i);
                if(hero.getHitArea().overlaps(b.getHitArea()) & b.getBulletID() == "enemy") {
                    hero.takeDamage(getLevelController().getEnemyDamageCoeff());
                    hero.setShipHit();
                    b.deactivate();
                    }
                break;
        }
        // Герой стреляет в бота
        for (int i = 0; i < bulletController.getActiveList().size(); i++) {
            Bullet b = bulletController.getActiveList().get(i);
                for (int j = 0; j < enemyController.getActiveList().size(); j++) {
                    Enemy enemy = enemyController.getActiveList().get(j);
                    if (enemy.getHitArea().overlaps(b.getHitArea()) & b.getBulletID() == "hero")
                    enemy.takeDamage(1);
            }
                break;
        }

// Weapon
    public Weapon(GameController gc, Ship ship, String title, float firePeriod, int damage, float bulletSpeed, int maxBullets, Vector3[] slots, String bulletID) {
        this.gc = gc;
        this.hero = hero;
        this.title = title;
        this.firePeriod = firePeriod;
        this.damage = damage;
        this.bulletSpeed = bulletSpeed;
        this.maxBullets = maxBullets;
        this.currBullets = this.maxBullets;
        this.slots = slots;
        this.shootSound = Assets.getInstance().getAssetManager().get("audio/Shoot.mp3");
        this.ship = ship;
        this.bulletID = bulletID;
    }

    public void setCurrBullets(float getAmmoPackProbo) {
        this.currBullets += (int)(getAmmoPackProbo);
        if (this.currBullets > 1000) this.currBullets = 1000;
    }

    public void fire() {
        if(currBullets > 0) {
            currBullets--;
            shootSound.play();
            for (int i = 0; i < slots.length ; i++) {
                float x, y, vx, vy;
                x = ship.getPosition().x + slots[i].x * (float)Math.cos(Math.toRadians(ship.getAngle() + slots[i].y));
                y = ship.getPosition().y + slots[i].x * (float)Math.sin(Math.toRadians(ship.getAngle() + slots[i].y)) ;
                vx = ship.getVelocity().x + bulletSpeed * (float)Math.cos(Math.toRadians(ship.getAngle() + slots[i].z));
                vy = ship.getVelocity().y + bulletSpeed * (float)Math.sin(Math.toRadians(ship.getAngle() + slots[i].z));
                gc.getBulletController().setup(x, y, vx, vy, ship.getAngle(), bulletID );

            }
        }
    }

